// <auto-generated />
using System;
using FreeBookAPI.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FreeBookAPI.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FreeBookAPI.Models.Book", b =>
                {
                    b.Property<Guid>("BookId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("BookImageId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookPDFId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SuggestedBook")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isRevoke")
                        .HasColumnType("bit");

                    b.HasKey("BookId");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("FreeBookAPI.Models.BookImage", b =>
                {
                    b.Property<Guid>("BookImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImagePath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookImageId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookImages");
                });

            modelBuilder.Entity("FreeBookAPI.Models.BookPDF", b =>
                {
                    b.Property<Guid>("BookPDFId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BookId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PdfPath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BookPDFId");

                    b.HasIndex("BookId")
                        .IsUnique();

                    b.ToTable("BookPDFs");
                });

            modelBuilder.Entity("FreeBookAPI.Models.BookImage", b =>
                {
                    b.HasOne("FreeBookAPI.Models.Book", "Book")
                        .WithOne("BookImage")
                        .HasForeignKey("FreeBookAPI.Models.BookImage", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("FreeBookAPI.Models.BookPDF", b =>
                {
                    b.HasOne("FreeBookAPI.Models.Book", "Book")
                        .WithOne("BookPDF")
                        .HasForeignKey("FreeBookAPI.Models.BookPDF", "BookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");
                });

            modelBuilder.Entity("FreeBookAPI.Models.Book", b =>
                {
                    b.Navigation("BookImage")
                        .IsRequired();

                    b.Navigation("BookPDF")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
